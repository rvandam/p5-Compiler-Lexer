/* C++ code produced by gperf version 3.0.4 */
/* Command-line: gperf -L C++ -Z DoubleCharactorOperatorMap -I gen/double_charactor_operator.gperf  */
/* Computed positions: -k'1-2' */

#include <lexer.hpp>
#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif

#line 1 "gen/double_charactor_operator.gperf"

/* maximum key range = 211, duplicates = 0 */

inline unsigned int DoubleCharactorOperatorMap::hash (register const char *str)
{
  static unsigned char asso_values[] =
    {
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211,  62, 211, 211,   5,  65,  35,  59,
        2,  82,  20,  22,  54,  80,  10, 120,  49,  70,
       67,  52,  39,  34,  29,  24,  19,  14,  47,   9,
      100,  12,   2,   4,  40,   0, 110, 127, 122, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 117, 102,  97,  92,  87, 211,
       77, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
        0, 211, 211, 211,  47, 211,  20,  55,  27, 211,
      125, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
      211, 211, 211, 211, 211, 211, 211, 211, 211, 211
    };
  return asso_values[(unsigned char)str[1]+4] + asso_values[(unsigned char)str[0]];
}

const char *DoubleCharactorOperatorMap::in_word_set (register const char *str)
{
  static const char * wordlist[] =
    {
      "x=",
      "",
      ">=",
      "", "",
      "$=",
      "",
      "$:",
      "",
      "$;",
      ".=",
      "",
      "==",
      "",
      "$7",
      "$*",
      "",
      "$9",
      "",
      "$5",
      "*=",
      "",
      "+=",
      "",
      "$4",
      "$&",
      "",
      "$'",
      "",
      "$3",
      "**",
      "",
      "$|",
      "",
      "$2",
      "&=",
      "",
      "&$",
      "",
      "$1",
      "$\"",
      "",
      "@$",
      "",
      "$0",
      "$<",
      "",
      "|=",
      "",
      "::",
      "@*",
      "",
      "$6",
      "",
      "$,",
      "&&",
      "",
      "$/",
      "",
      "$(",
      "${",
      "",
      "!=",
      "",
      "$#",
      "%=",
      "",
      "%$",
      "", "",
      "$!",
      "",
      "$.",
      "",
      "||",
      "$-",
      "",
      "..",
      "", "",
      "-=",
      "",
      "$`",
      "", "",
      "$)",
      "",
      "$%",
      "", "",
      "&{",
      "",
      "$^",
      "", "",
      "@{",
      "",
      "$]",
      "", "",
      "<=",
      "",
      "$\\",
      "", "",
      "$8",
      "",
      "$[",
      "", "",
      "@-",
      "",
      ">>",
      "", "",
      "$>",
      "",
      "^=",
      "", "",
      "%{",
      "",
      "=>",
      "", "",
      "$+",
      "",
      "$@",
      "", "",
      "$~",
      "",
      "$?",
      "", "",
      "%-",
      "",
      "=~",
      "", "",
      "<<",
      "",
      "++",
      "", "",
      "~~",
      "",
      "%%",
      "", "",
      "--",
      "", "", "", "", "", "", "", "", "",
      "@+",
      "", "", "", "", "", "", "", "", "",
      "", "",
      "//",
      "", "", "", "", "", "", "", "", "",
      "", "", "",
      "%+",
      "",
      "!~",
      "", "",
      "->",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "",
      "<>"
    };


      register int key = hash (str);

      if (key <= DOUBLE_OPERATOR_MAX_HASH_VALUE && key >= 0)
        {
          register const char *s = wordlist[key];

          if (*str == *s && !strcmp (str + 1, s + 1))
            return s;
        }
  return 0;
}
